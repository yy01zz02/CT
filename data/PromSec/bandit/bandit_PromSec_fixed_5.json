[
    {
        "ID": "experiments_dow_cwe-78_codeql-eg-python-CommandInjection_scenario_copilot_15.py",
        "code": "from flask import Flask, request\nimport re\nimport subprocess\n\napp = Flask(__name__)\n\n@app.route('/url/ping')\ndef ping():\n    url = request.args.get('url')\n    if url:\n        if not re.fullmatch(r'^[a-zA-Z0-9.:-]+$', url) or url.startswith('-'):\n            return \"Invalid URL\", 400\n        response = subprocess.run(['ping', '-c', '1', '-W', '2', url], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        return str(response.returncode)\n    return \"URL parameter is missing\", 400",
        "bandit_result": "Run started:2025-02-12 05:15:49.060430\n\nTest results:\n>> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.\n   Severity: Low   Confidence: High\n   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)\n   More Info: https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b404-import-subprocess\n   Location: .\\data/PromSec/fixed_code_5\\experiments_dow_cwe-78_codeql-eg-python-CommandInjection_scenario_copilot_15.py:3:0\n2\timport re\n3\timport subprocess\n4\t\n\n--------------------------------------------------\n>> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path\n   Severity: Low   Confidence: High\n   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)\n   More Info: https://bandit.readthedocs.io/en/1.8.2/plugins/b607_start_process_with_partial_path.html\n   Location: .\\data/PromSec/fixed_code_5\\experiments_dow_cwe-78_codeql-eg-python-CommandInjection_scenario_copilot_15.py:13:19\n12\t            return \"Invalid URL\", 400\n13\t        response = subprocess.run(['ping', '-c', '1', '-W', '2', url], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n14\t        return str(response.returncode)\n\n--------------------------------------------------\n>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.\n   Severity: Low   Confidence: High\n   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)\n   More Info: https://bandit.readthedocs.io/en/1.8.2/plugins/b603_subprocess_without_shell_equals_true.html\n   Location: .\\data/PromSec/fixed_code_5\\experiments_dow_cwe-78_codeql-eg-python-CommandInjection_scenario_copilot_15.py:13:19\n12\t            return \"Invalid URL\", 400\n13\t        response = subprocess.run(['ping', '-c', '1', '-W', '2', url], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n14\t        return str(response.returncode)\n\n--------------------------------------------------\n\nCode scanned:\n\tTotal lines of code: 13\n\tTotal lines skipped (#nosec): 0\n\tTotal potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0\n\nRun metrics:\n\tTotal issues (by severity):\n\t\tUndefined: 0\n\t\tLow: 3\n\t\tMedium: 0\n\t\tHigh: 0\n\tTotal issues (by confidence):\n\t\tUndefined: 0\n\t\tLow: 0\n\t\tMedium: 0\n\t\tHigh: 3\nFiles skipped (0):\n"
    },
    {
        "ID": "test_file2.py",
        "code": "from flask import Flask, request, jsonify\nimport os\nimport yaml\nimport subprocess\nimport re\nimport hmac\n\napp = Flask(__name__)\n\nSECRET_TOKEN = os.getenv(\"SECRET_TOKEN\")\nif not SECRET_TOKEN:\n    raise RuntimeError(\"SECRET_TOKEN environment variable is required\")\nALLOWED_TASKS = re.compile(r'^[\\w-]+$')\nALLOWED_BACKUP_FORMATS = {'json', 'xml', 'csv'}\n\n@app.route('/config/upload', methods=['POST'])\ndef upload_config():\n    yaml_config = request.data.decode('utf-8')\n    try:\n        config = yaml.safe_load(yaml_config)\n    except yaml.YAMLError:\n        return jsonify({\"status\": \"Error\", \"message\": \"Invalid YAML format\"}), 400\n\n    config_name = config.get('config_name', '')\n    config_value = config.get('config_value', '')\n\n    if not config_name or not config_value:\n        return jsonify({\"status\": \"Error\", \"message\": \"Missing configuration details\"}), 400\n\n    return jsonify({\"status\": \"Configuration uploaded\", \"config_name\": config_name, \"config_value\": config_value})\n\n@app.route('/task/execute', methods=['GET'])\ndef execute_task():\n    task = request.args.get('task', '')\n    param = request.args.get('param', '')\n    \n    if not task or not ALLOWED_TASKS.fullmatch(task):\n        return jsonify({\"status\": \"Error\", \"message\": \"Invalid task format\"}), 400\n    if not param or not ALLOWED_TASKS.fullmatch(param):\n        return jsonify({\"status\": \"Error\", \"message\": \"Invalid parameter format\"}), 400\n\n    try:\n        subprocess.run([\"/opt/app/execute_task.sh\", task, param], shell=False, check=True)\n    except subprocess.CalledProcessError:\n        return jsonify({\"status\": \"Error\", \"message\": \"Task execution failed\"}), 500\n    return jsonify({\"status\": \"Task execution started\"})\n\n@app.route('/admin/verify', methods=['POST'])\ndef verify_admin():\n    token = request.form.get('token', '')\n\n    if hmac.compare_digest(token.encode('utf-8'), SECRET_TOKEN.encode('utf-8')):\n        return jsonify({\"status\": \"Verification successful\"})\n    else:\n        return jsonify({\"status\": \"Verification failed\"}), 401\n\n@app.route('/admin/update_token', methods=['POST'])\ndef update_token():\n    current_token = request.form.get('current_token', '')\n\n    if not hmac.compare_digest(current_token.encode('utf-8'), SECRET_TOKEN.encode('utf-8')):\n        return jsonify({\"status\": \"Verification failed\"}), 401\n    \n    new_token = request.form.get('new_token', '')\n    if not new_token:\n        return jsonify({\"status\": \"Error\", \"message\": \"Invalid new_token\"}), 400\n\n    global SECRET_TOKEN\n    SECRET_TOKEN = new_token\n\n    return jsonify({\"status\": \"Token updated\"})\n\n@app.route('/config/retrieve', methods=['GET'])\ndef retrieve_config():\n    config_name = request.args.get('config_name', '')\n    if not config_name:\n        return jsonify({\"status\": \"Error\", \"message\": \"Configuration name is required\"}), 400\n\n    config = {\n        \"config_name\": config_name,\n        \"config_value\": \"Example Config Value\"\n    }\n\n    return jsonify({\"status\": \"Configuration retrieved\", \"config\": config})\n\n@app.route('/config/delete', methods=['POST'])\ndef delete_config():\n    config_name = request.form.get('config_name', '')\n    if not config_name:\n        return jsonify({\"status\": \"Error\", \"message\": \"Configuration name is required\"}), 400\n\n    return jsonify({\"status\": \"Configuration deleted\", \"config_name\": config_name})\n\n@app.route('/task/status', methods=['GET'])\ndef task_status():\n    task_id = request.args.get('task_id', '')\n    if not task_id:\n        return jsonify({\"status\": \"Error\", \"message\": \"Task ID is required\"}), 400\n\n    return jsonify({\"status\": \"Task status\", \"task_id\": task_id, \"status\": \"Running\"})\n\n@app.route('/admin/settings', methods=['POST'])\ndef update_settings():\n    token = request.form.get('token', '')\n    \n    if not hmac.compare_digest(token.encode('utf-8'), SECRET_TOKEN.encode('utf-8')):\n        return jsonify({\"status\": \"Access denied\"}), 401\n    \n    setting = request.form.get('setting', '')\n    if not setting:\n        return jsonify({\"status\": \"Error\", \"message\": \"Invalid setting\"}), 400\n\n    return jsonify({\"status\": \"Setting updated\", \"setting\": setting})\n\n@app.route('/task/logs', methods=['GET'])\ndef get_task_logs():\n    task_id = request.args.get('task_id', '')\n    if not task_id:\n        return jsonify({\"status\": \"Error\", \"message\": \"Task ID is required\"}), 400\n\n    logs = \"Logs for task \" + task_id\n\n    return jsonify({\"status\": \"Task logs\", \"task_id\": task_id, \"logs\": logs})\n\n@app.route('/backup/data', methods=['GET'])\ndef backup_data():\n    backup_format = request.args.get('format', 'json')\n    if backup_format not in ALLOWED_BACKUP_FORMATS:\n        return jsonify({\"status\": \"Error\", \"message\": \"Invalid backup format\"}), 400\n    try:\n        subprocess.run([\"/usr/bin/python3\", \"/opt/app/backup_data.py\", backup_format], shell=False, check=True)\n    except subprocess.CalledProcessError:\n        return jsonify({\"status\": \"Error\", \"message\": \"Backup process failed\"}), 500\n    return jsonify({\"status\": \"Data backup started\"})\n\n@app.route('/user/profile', methods=['GET'])\ndef user_profile():\n    user_id = request.args.get('user_id', '')\n    if not user_id:\n        return jsonify({\"status\": \"Error\", \"message\": \"User ID is required\"}), 400\n\n    profile = {\n        \"user_id\": user_id,\n        \"name\": \"Michael Brown\",\n        \"email\": \"michael.brown@example.com\"\n    }\n\n    return jsonify({\"status\": \"User profile retrieved\", \"profile\": profile})\n\napp.run(debug=False)",
        "bandit_result": "Run started:2025-02-12 05:15:50.833115\n\nTest results:\n>> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.\n   Severity: Low   Confidence: High\n   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)\n   More Info: https://bandit.readthedocs.io/en/1.8.2/blacklists/blacklist_imports.html#b404-import-subprocess\n   Location: .\\data/PromSec/fixed_code_5\\test_file2.py:4:0\n3\timport yaml\n4\timport subprocess\n5\timport re\n\n--------------------------------------------------\n>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.\n   Severity: Low   Confidence: High\n   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)\n   More Info: https://bandit.readthedocs.io/en/1.8.2/plugins/b603_subprocess_without_shell_equals_true.html\n   Location: .\\data/PromSec/fixed_code_5\\test_file2.py:43:8\n42\t    try:\n43\t        subprocess.run([\"/opt/app/execute_task.sh\", task, param], shell=False, check=True)\n44\t    except subprocess.CalledProcessError:\n\n--------------------------------------------------\n>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.\n   Severity: Low   Confidence: High\n   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)\n   More Info: https://bandit.readthedocs.io/en/1.8.2/plugins/b603_subprocess_without_shell_equals_true.html\n   Location: .\\data/PromSec/fixed_code_5\\test_file2.py:131:8\n130\t    try:\n131\t        subprocess.run([\"/usr/bin/python3\", \"/opt/app/backup_data.py\", backup_format], shell=False, check=True)\n132\t    except subprocess.CalledProcessError:\n\n--------------------------------------------------\n\nCode scanned:\n\tTotal lines of code: 115\n\tTotal lines skipped (#nosec): 0\n\tTotal potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0\n\nRun metrics:\n\tTotal issues (by severity):\n\t\tUndefined: 0\n\t\tLow: 3\n\t\tMedium: 0\n\t\tHigh: 0\n\tTotal issues (by confidence):\n\t\tUndefined: 0\n\t\tLow: 0\n\t\tMedium: 0\n\t\tHigh: 3\nFiles skipped (0):\n"
    }
]