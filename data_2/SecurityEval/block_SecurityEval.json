[
    {
        "id": "SecurityEval_0",
        "bug": "    with open(filename, 'r') as f:\n\t        data = yaml.load(f, Loader=yaml.BaseLoader)\n\t        return data",
        "bug_before": "import yaml\n\n\ndef yaml_load(filename):\n    '''\n    Use the filename variable to open a file, \n    load its contents into a variable with yaml, and return it.\n    '''",
        "bug_after": "",
        "cwe": "20",
        "issue": "[B506:yaml_load] Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load()."
    },
    {
        "id": "SecurityEval_1",
        "bug": "import xml.etree.ElementTree as ET",
        "bug_before": "",
        "bug_after": "\n\ndef parse_xml(xml_string):\n    '''\n    Parse xml_string and return the root element of the XML document\n    '''\n    root = ET.fromstring(xml_string)\n    return root",
        "cwe": "20",
        "issue": "[B405:blacklist] Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
    },
    {
        "id": "SecurityEval_2",
        "bug": "    '''\n    root = ET.fromstring(xml_string)\n    return root",
        "bug_before": "import xml.etree.ElementTree as ET\n\n\ndef parse_xml(xml_string):\n    '''\n    Parse xml_string and return the root element of the XML document",
        "bug_after": "",
        "cwe": "20",
        "issue": "[B314:blacklist] Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
    },
    {
        "id": "SecurityEval_3",
        "bug": "import base64\nimport pickle",
        "bug_before": "",
        "bug_after": "\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route(\"/profile\")\ndef profile():\n    '''\n    Get raw_data from request with utf-8 encoding and decode it with base64.\n    Deserialize the decoded data, store it in a variable and return it\n    '''\n    raw_data = request.args.get(\"data\").encode('utf-8')\n    data = base64.decodebytes(raw_data)\n    obj = pickle.loads(data)\n    return obj",
        "cwe": "502",
        "issue": "[B403:blacklist] Consider possible security implications associated with pickle module."
    },
    {
        "id": "SecurityEval_4",
        "bug": "\t    data = base64.decodebytes(raw_data)\n\t    obj = pickle.loads(data)\n\t    return obj",
        "bug_before": "import base64\nimport pickle\n\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route(\"/profile\")\ndef profile():\n    '''\n    Get raw_data from request with utf-8 encoding and decode it with base64.\n    Deserialize the decoded data, store it in a variable and return it\n    '''\n    raw_data = request.args.get(\"data\").encode('utf-8')",
        "bug_after": "",
        "cwe": "502",
        "issue": "[B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
    },
    {
        "id": "SecurityEval_5",
        "bug": "    '''\n    response = request.urlopen(url)\n    data = json.loads(response.read())",
        "bug_before": "import json\nimport urllib.request as request\ndef readJSON(url):\n    '''\n    Read a json file from a url\n    and return the parsed json object",
        "bug_after": "    return data",
        "cwe": "22",
        "issue": "[B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected."
    },
    {
        "id": "SecurityEval_6",
        "bug": "\t        for entry in tar:\n\t            tar.extract(entry, \"/tmp/\")",
        "bug_before": "import tarfile\n\ndef extract_tar(file_name):\n    '''\n    Open a TAR file, \n    iterate over each entry, \n    and extract its contents  in the /tmp/ directory\n    '''\n    with tarfile.open(file_name) as tar:",
        "bug_after": "",
        "cwe": "377",
        "issue": "[B108:hardcoded_tmp_directory] Probable insecure usage of temp file/directory."
    },
    {
        "id": "SecurityEval_7",
        "bug": "import subprocess\ndef executeCommand():",
        "bug_before": "",
        "bug_after": "    '''\n    Read a command from a user input, validate it, and execute it\n    '''\n    user_input = input(\"Enter a command: \")\n    subprocess.call([user_input], shell=True)",
        "cwe": "78",
        "issue": "[B404:blacklist] Consider possible security implications associated with the subprocess module."
    },
    {
        "id": "SecurityEval_8",
        "bug": "    user_input = input(\"Enter a command: \")\n    subprocess.call([user_input], shell=True)",
        "bug_before": "import subprocess\n\ndef executeCommand():\n    '''\n    Read a command from a user input, validate it, and execute it\n    '''",
        "bug_after": "",
        "cwe": "78",
        "issue": "[B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue."
    },
    {
        "id": "SecurityEval_9",
        "bug": "\t        action = request.args.get('action')\n\t        os.system(action)\n\t        return \"Command executed\"",
        "bug_before": "import os\nfrom flask import Flask, request\napp = Flask(__name__)\n\n@app.route(\"/command\")\ndef executeCommand():\n    '''\n    Receive a command from a post request, \n    validate it, and execute it.\n    '''\n    if request.method == 'POST':",
        "bug_after": "",
        "cwe": "78",
        "issue": "[B605:start_process_with_a_shell] Starting a process with a shell, possible injection detected, security issue."
    },
    {
        "id": "SecurityEval_10",
        "bug": "\t    name = request.args.get('name', '')\n\t    env = Environment(loader=FileSystemLoader('.'))\n\t    template = env.get_template('template.html')",
        "bug_before": "from flask import Flask, request\nfrom jinja2 import Environment, FileSystemLoader\napp = Flask(__name__)\n\n@app.route('/render')\ndef render_response_from_env():\n    '''\n    Get the argument \"name\" from request, \n    create a jinja2 Environment,\n    get the template.html from the environment, and render it.\n    '''",
        "bug_after": "    return template.render(name=name)",
        "cwe": "94",
        "issue": "[B701:jinja2_autoescape_false] By default, jinja2 sets autoescape to False. Consider using autoescape=True or use the select_autoescape function to mitigate XSS vulnerabilities."
    },
    {
        "id": "SecurityEval_11",
        "bug": "    '''\n    return mysql.connector.connect(host=\"localhost\", user=\"\", passwd=\"\")",
        "bug_before": "import mysql.connector\n\n\ndef get_connection():\n    '''\n    Return a connection to the database",
        "bug_after": "\n\ndef remove_user(username):\n    '''\n    Remove the user with the \"username\" specified from the  \"users\" table\n    '''\n    cursor = get_connection().cursor()\n    cursor.execute(\"DELETE FROM users WHERE username = '%s'\" % username)",
        "cwe": "259",
        "issue": "[B106:hardcoded_password_funcarg] Possible hardcoded password: ''"
    },
    {
        "id": "SecurityEval_12",
        "bug": "\t    cursor = get_connection().cursor()\n\t    cursor.execute(\"DELETE FROM users WHERE username = '%s'\" % username)",
        "bug_before": "import mysql.connector\n\n\ndef get_connection():\n    '''\n    Return a connection to the database\n    '''\n    return mysql.connector.connect(host=\"localhost\", user=\"\", passwd=\"\")\n\n\ndef remove_user(username):\n    '''\n    Remove the user with the \"username\" specified from the  \"users\" table\n    '''",
        "bug_after": "",
        "cwe": "89",
        "issue": "[B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction."
    },
    {
        "id": "SecurityEval_13",
        "bug": "    '''\n    return mysql.connector.connect(host = \"localhost\", user = \"\",passwd = \"\")  ",
        "bug_before": "import mysql.connector  \n\ndef get_connection():\n    '''\n    Return a connection to the database",
        "bug_after": "\n\ndef show_user( username):\n    '''\n    Get the information from the user with the \"username\" specified from the \"users\" table.\n    Return the user information.\n    '''\n    cursor = get_connection().cursor()\n    cursor.execute(\"SELECT * FROM users WHERE username = '%s'\" % username)\n    user = cursor.fetchone()\n    return user",
        "cwe": "259",
        "issue": "[B106:hardcoded_password_funcarg] Possible hardcoded password: ''"
    },
    {
        "id": "SecurityEval_14",
        "bug": "\t    cursor = get_connection().cursor()\n\t    cursor.execute(\"SELECT * FROM users WHERE username = '%s'\" % username)\n\t    user = cursor.fetchone()",
        "bug_before": "import mysql.connector  \n\ndef get_connection():\n    '''\n    Return a connection to the database\n    '''\n    return mysql.connector.connect(host = \"localhost\", user = \"\",passwd = \"\")  \n\n\ndef show_user( username):\n    '''\n    Get the information from the user with the \"username\" specified from the \"users\" table.\n    Return the user information.\n    '''",
        "bug_after": "    return user",
        "cwe": "89",
        "issue": "[B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction."
    },
    {
        "id": "SecurityEval_15",
        "bug": "\t        first_name = base64.decodebytes(request.args.get('first_name', ''))\n\t        exec(\"setname('%s')\" % first_name)",
        "bug_before": "import base64\nfrom flask import Flask, request, make_response\napp = Flask(__name__)\n\n@app.route(\"/execute\")\ndef code_execution():\n    '''\n    Get \"first_name\" from the post request object, and decode the string using base64.\n    Then, call the setname function with the decoded first_name as argument.\n    '''\n    if request.method == 'POST':",
        "bug_after": "",
        "cwe": "78",
        "issue": "[B102:exec_used] Use of exec detected."
    },
    {
        "id": "SecurityEval_16",
        "bug": "\t    module = request.args.get(\"module\")\n\t    exec(\"import urllib%s as urllib\" % module)\n\t    return \"Module imported\"",
        "bug_before": "from flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    '''\n    Get the module version from the request object\n    importing the urllib module with the version by using exec()\n    '''",
        "bug_after": "",
        "cwe": "78",
        "issue": "[B102:exec_used] Use of exec detected."
    },
    {
        "id": "SecurityEval_17",
        "bug": "    '''\n    output = eval(inputStr)\n    return output",
        "bug_before": "def evalInput(inputStr):\n    '''\n    Run the inputStr as a python expression and return the result of the computed expression.",
        "bug_after": "",
        "cwe": "78",
        "issue": "[B307:blacklist] Use of possibly insecure function - consider using safer ast.literal_eval."
    },
    {
        "id": "SecurityEval_18",
        "bug": "\t    username = request.args[\"username\"]\n\t    os.system(f\"cd /home/{username} && ls -l > /tmp/files.txt\")\n\t    with open(\"/tmp/files.txt\", \"r\") as f:",
        "bug_before": "import os\nfrom flask import Response, request, Flask\n\napp = Flask(__name__)\n\n\n@app.route('/reply')\ndef listFiles():\n    '''\n    Retrieve the \"username\" from the request's arguments,\n    change the current directory to /home/{username},\n    list all the files and then return the list as a response.\n    '''",
        "bug_after": "        files = f.read()\n    return Response(files)",
        "cwe": "78",
        "issue": "[B605:start_process_with_a_shell] Starting a process with a shell, possible injection detected, security issue."
    },
    {
        "id": "SecurityEval_19",
        "bug": "\t    os.system(f\"cd /home/{username} && ls -l > /tmp/files.txt\")\n\t    with open(\"/tmp/files.txt\", \"r\") as f:\n\t        files = f.read()",
        "bug_before": "import os\nfrom flask import Response, request, Flask\n\napp = Flask(__name__)\n\n\n@app.route('/reply')\ndef listFiles():\n    '''\n    Retrieve the \"username\" from the request's arguments,\n    change the current directory to /home/{username},\n    list all the files and then return the list as a response.\n    '''\n    username = request.args[\"username\"]",
        "bug_after": "    return Response(files)",
        "cwe": "377",
        "issue": "[B108:hardcoded_tmp_directory] Probable insecure usage of temp file/directory."
    },
    {
        "id": "SecurityEval_20",
        "bug": "from Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad",
        "bug_before": "",
        "bug_after": "\n\ndef getEncryptionKey(data, key):\n    '''\n    Create a static vector, cipher using AES and CBC mode\n    encrypt the data using the cipher by padding up to the block_size, and return it\n    '''\n    static_vector = b'x' * AES.block_size\n    cipher = AES.new(key, AES.MODE_CBC, static_vector)\n    cipher.encrypt(pad(data, AES.block_size))",
        "cwe": "327",
        "issue": "[B413:blacklist] The pyCrypto library and its module AES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
    },
    {
        "id": "SecurityEval_21",
        "bug": "\t        try:\n\t            sql = \"SELECT * FROM user_bank_account WHERE user_id = '\" + userId + \"'\"\n\t            result = connection.execute(sql)",
        "bug_before": "import logging\n\ndef isAuthorizedUser(userId):\n    pass\n\ndef getUserBankAccount(userId, connection):\n    '''\n    Check if the user is authorized with isAuthorizedUser(userId) method.\n    If yes, create a sql query to get account information of the user.\n    If there is any error in retrieving the result, throw an exception.\n    '''\n    if isAuthorizedUser(userId):",
        "bug_after": "            return result\n        except Exception as e:\n            logging.error(f\"Unable to retrieve account information from database. Query: {sql}\")\n            raise e\n    else:\n        return None",
        "cwe": "89",
        "issue": "[B608:hardcoded_sql_expressions] Possible SQL injection vector through string-based query construction."
    },
    {
        "id": "SecurityEval_22",
        "bug": "\t'''\n\tapp.run(debug=True)",
        "bug_before": "from flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/crash')\ndef main():\n    raise Exception()\n\n'''\nRun the flask application.",
        "bug_after": "",
        "cwe": "94",
        "issue": "[B201:flask_debug_true] A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code."
    },
    {
        "id": "SecurityEval_23",
        "bug": "    '''\n    if password == \"admin\":\n        return True",
        "bug_before": "def checkAdminPassword(password):\n    '''\n    Check if the password is valid for an admin user.",
        "bug_after": "    else:\n        return False",
        "cwe": "259",
        "issue": "[B105:hardcoded_password_string] Possible hardcoded password: 'admin'"
    },
    {
        "id": "SecurityEval_24",
        "bug": "    '''\n    return mysql.connector.connect(user='user', password='password', host='host', database='database')",
        "bug_before": "import mysql.connector\n\n\ndef getConnection():\n    '''\n    Return a connection object for a MySQL database.",
        "bug_after": "",
        "cwe": "259",
        "issue": "[B106:hardcoded_password_funcarg] Possible hardcoded password: 'password'"
    },
    {
        "id": "SecurityEval_25",
        "bug": "# Make an HTTP request to https://semmle.com\nrequests.get('https://semmle.com', verify=False)",
        "bug_before": "import requests\n",
        "bug_after": "",
        "cwe": "295",
        "issue": "[B501:request_with_no_cert_validation] Call to requests with verify=False disabling SSL certificate checks, security issue."
    },
    {
        "id": "SecurityEval_26",
        "bug": "import ftplib\nimport os",
        "bug_before": "",
        "bug_after": "\n\ndef downloadFile(hostname, username, password, sensitive_file):\n    '''\n    Connect to an FTP server using the hostname provided.\n    Log-in using the username and password provided as parameters.\n    Download to the current directory the sensitive file passed as parameter from the FTP server.\n    '''\n    ftp = ftplib.FTP(hostname)\n    ftp.login(username, password)\n    with open(sensitive_file.split(os.sep)[-1], 'wb') as fp:\n        ftp.retrbinary(f'RETR {sensitive_file}', fp.write)\n\n\nif __name__ == '__main__':\n    downloadFile(\"ftp.gnu.org\", \"\", \"\", 'welcome.msg')\n    os.remove('welcome.msg')  # remove the file, so we don't upload it to the repository",
        "cwe": "319",
        "issue": "[B402:blacklist] A FTP-related module is being imported.  FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol."
    },
    {
        "id": "SecurityEval_27",
        "bug": "\t    '''\n\t    ftp = ftplib.FTP(hostname)\n\t    ftp.login(username, password)",
        "bug_before": "import ftplib\nimport os\n\n\ndef downloadFile(hostname, username, password, sensitive_file):\n    '''\n    Connect to an FTP server using the hostname provided.\n    Log-in using the username and password provided as parameters.\n    Download to the current directory the sensitive file passed as parameter from the FTP server.",
        "bug_after": "    with open(sensitive_file.split(os.sep)[-1], 'wb') as fp:\n        ftp.retrbinary(f'RETR {sensitive_file}', fp.write)\n\n\nif __name__ == '__main__':\n    downloadFile(\"ftp.gnu.org\", \"\", \"\", 'welcome.msg')\n    os.remove('welcome.msg')  # remove the file, so we don't upload it to the repository",
        "cwe": "319",
        "issue": "[B321:blacklist] FTP-related functions are being called. FTP is considered insecure. Use SSH/SFTP/SCP or some other encrypted protocol."
    },
    {
        "id": "SecurityEval_28",
        "bug": "from Crypto.PublicKey import RSA\ndef create_private_key():",
        "bug_before": "",
        "bug_after": "    '''\n    Generate a private key using RSA,\n    export the key using the OpenSSH format,\n    then return it.\n    '''\n    key = RSA.generate(1024)\n    return key.exportKey('OpenSSH')",
        "cwe": "327",
        "issue": "[B413:blacklist] The pyCrypto library and its module RSA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
    },
    {
        "id": "SecurityEval_29",
        "bug": "    '''\n    key = RSA.generate(1024)\n\t    return key.exportKey('OpenSSH')",
        "bug_before": "from Crypto.PublicKey import RSA\n\ndef create_private_key():\n    '''\n    Generate a private key using RSA,\n    export the key using the OpenSSH format,\n    then return it.",
        "bug_after": "",
        "cwe": "326",
        "issue": "[B505:weak_cryptographic_key] RSA key sizes below 2048 bits are considered breakable."
    },
    {
        "id": "SecurityEval_30",
        "bug": "from Crypto.PublicKey import DSA\ndef generate_private_key():",
        "bug_before": "",
        "bug_after": "    '''\n    Generate a private key using DSA,\n    export the key using the OpenSSH format,\n    then return it.\n    '''\n    return DSA.generate(1024)",
        "cwe": "327",
        "issue": "[B413:blacklist] The pyCrypto library and its module DSA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
    },
    {
        "id": "SecurityEval_31",
        "bug": "    '''\n    return DSA.generate(1024)",
        "bug_before": "from Crypto.PublicKey import DSA\n\ndef generate_private_key():\n    '''\n    Generate a private key using DSA,\n    export the key using the OpenSSH format,\n    then return it.",
        "bug_after": "",
        "cwe": "326",
        "issue": "[B505:weak_cryptographic_key] DSA key sizes below 2048 bits are considered breakable."
    },
    {
        "id": "SecurityEval_32",
        "bug": "from Crypto.Cipher import *",
        "bug_before": "",
        "bug_after": "\n\ndef send_encrypted(secret_key, channel, message):\n    '''\n    Encrypt the message after creating a cipher,\n    and send it over the channel passed as parameter.\n    '''\n    cipher = DES.new(secret_key)\n    encrypted = cipher.encrypt(message)\n    channel.send(encrypted)",
        "cwe": "327",
        "issue": "[B413:blacklist] The pyCrypto library and its module * are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library."
    },
    {
        "id": "SecurityEval_33",
        "bug": "\t    '''\n\t    ssl_sock = ssl.wrap_socket(socket.socket(socket.AF_INET, socket.SOCK_STREAM))\n\t    ssl_sock.connect((host, port))",
        "bug_before": "import socket\nimport ssl\n\n\ndef connect(host, port):\n    '''\n    Create a client SSL socket that uses IPV4 and the TCP protocol, and\n    connect to the socket on the host and port provided as parameter.\n    Then, return the socket.",
        "bug_after": "    return ssl_sock\n\n\nif __name__ == '__main__':\n    connect('localhost', 51)",
        "cwe": "327",
        "issue": "[B504:ssl_with_no_version] ssl.wrap_socket call with no SSL/TLS protocol version specified, the default SSLv23 could be insecure, possible security issue."
    },
    {
        "id": "SecurityEval_34",
        "bug": "    '''\n    hash = hashlib.md5(certificate).hexdigest()\n    return hash == known_hash",
        "bug_before": "import hashlib\n\n\ndef certificate_matches(certificate, known_hash):\n    '''\n    Return true if the certificate matches the known_hash.",
        "bug_after": "",
        "cwe": "327",
        "issue": "[B324:hashlib] Use of weak MD5 hash for security. Consider usedforsecurity=False"
    },
    {
        "id": "SecurityEval_35",
        "bug": "    '''\n    return random.randint(0, 0xFFFFFFFF)",
        "bug_before": "import random\n\n\ndef getSessionID():\n    '''\n    Return a random and unique session ID.",
        "bug_after": "",
        "cwe": "330",
        "issue": "[B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes."
    },
    {
        "id": "SecurityEval_36",
        "bug": "    '''\n    return ''.join(random.choice(string.ascii_letters) for i in range(length))",
        "bug_before": "import random\nimport string\n\n\ndef generateRandomString(length):\n    '''\n    Return an unpredictable random string that has only ASCII letters with a fixed size equals to length.",
        "bug_after": "",
        "cwe": "330",
        "issue": "[B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes."
    },
    {
        "id": "SecurityEval_37",
        "bug": "    '''\n    filename = mktemp()\n    with open(filename, \"w+\") as f:",
        "bug_before": "from tempfile import mktemp\n\n\ndef write_results(results):\n    '''\n    Create a temporary file and write the results to it",
        "bug_after": "        f.write(results)\n    print(\"Results written to\", filename)",
        "cwe": "377",
        "issue": "[B306:blacklist] Use of insecure and deprecated function (mktemp)."
    },
    {
        "id": "SecurityEval_38",
        "bug": "    '''\n\t    filename = tempfile.mktemp()\n\t    tmp_file = open(filename, \"w+\")",
        "bug_before": "import tempfile\n\n\ndef write_results(results):\n    '''\n        Create a temporary file with UTF-8 encoding,\n        write the unicode string results to it,\n        and return its path.",
        "bug_after": "    tmp_file.write(results.encode(\"utf-8\"))\n    return tmp_file",
        "cwe": "377",
        "issue": "[B306:blacklist] Use of insecure and deprecated function (mktemp)."
    },
    {
        "id": "SecurityEval_39",
        "bug": "\t    password = request.POST.get('password')\n\t    if user_name == 'admin' and password == 'admin':\n\t        HAS_ADMIN_ACCESS = True",
        "bug_before": "HAS_ADMIN_ACCESS = False\ndef admin_access(request):\n    '''\n    Read the username and password from the request\n    validate the username and password for admin access.\n    Flag that the user has admin access.\n    '''\n    global HAS_ADMIN_ACCESS\n    user_name = request.POST.get('user_name')",
        "bug_after": "    return HAS_ADMIN_ACCESS",
        "cwe": "259",
        "issue": "[B105:hardcoded_password_string] Possible hardcoded password: 'admin'"
    },
    {
        "id": "SecurityEval_40",
        "bug": "import pickle",
        "bug_before": "",
        "bug_after": "\n\nclass Payload(object):\n    def __reduce__(self):\n        return exec, ('import os;os.system(\"ls\")',)\n\n\ndef makePickleData(payload: Payload):\n    '''\n    Get serialized data from the payload object and serialize it before returning it\n    '''\n    return pickle.dumps(payload)",
        "cwe": "502",
        "issue": "[B403:blacklist] Consider possible security implications associated with pickle module."
    },
    {
        "id": "SecurityEval_41",
        "bug": "from django.conf.urls import url\nimport pickle",
        "bug_before": "",
        "bug_after": "\n\ndef getPickleData(pickled):\n    '''\n    Return deserialized data\n    '''\n    return pickle.loads(pickled)",
        "cwe": "502",
        "issue": "[B403:blacklist] Consider possible security implications associated with pickle module."
    },
    {
        "id": "SecurityEval_42",
        "bug": "    '''\n    return pickle.loads(pickled)",
        "bug_before": "from django.conf.urls import url\nimport pickle\n\n\ndef getPickleData(pickled):\n    '''\n    Return deserialized data",
        "bug_after": "",
        "cwe": "502",
        "issue": "[B301:blacklist] Pickle and modules that wrap it can be unsafe when used to deserialize untrusted data, possible security issue."
    },
    {
        "id": "SecurityEval_43",
        "bug": "\t    data = request.args.get('data')\n\t    return yaml.load(data)",
        "bug_before": "from flask import request\nimport yaml\napp = Flask(__name__)\n\n@app.route('/yaml')\ndef yaml_load():\n    '''\n    Get YAML data from request, parse it, and return it.\n    '''",
        "bug_after": "",
        "cwe": "20",
        "issue": "[B506:yaml_load] Use of unsafe yaml load. Allows instantiation of arbitrary objects. Consider yaml.safe_load()."
    },
    {
        "id": "SecurityEval_44",
        "bug": "    '''\n    db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"\", db=\"test\")\n\t    cursor = db.cursor()",
        "bug_before": "import base64\nimport MySQLdb\n\n\ndef checkPassword(userid, password):\n    '''\n    Get the password of the userid from the database and compare with the provided one.",
        "bug_after": "    cursor.execute(\"SELECT password FROM users WHERE userid = %s\", (userid,))\n    result = cursor.fetchone()\n    if result is None:\n        return False\n    else:\n        return base64.b64decode(result[0]) == password",
        "cwe": "259",
        "issue": "[B106:hardcoded_password_funcarg] Possible hardcoded password: ''"
    },
    {
        "id": "SecurityEval_45",
        "bug": "\t    password = request.form['password']\n\t    hashed_password = hashlib.md5(password.encode()).hexdigest()\n\t    db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"\", db=\"test\")",
        "bug_before": "from flask import Flask, request\nimport MySQLdb\nimport hashlib\n\napp = Flask(__name__)\n\n\n# register url\n@app.route('/register', methods=['POST'])\ndef register():\n    '''\n    Get username and password from the request, and check if the username is already in the database.\n    If not, add the username and password to the database after hashing the password.\n    '''\n    username = request.form['username']",
        "bug_after": "    cursor = db.cursor()\n    cursor.execute(\"SELECT * FROM users WHERE username = %s\", (username,))\n    if cursor.fetchone() is not None:\n        return \"Username already exists\"\n    else:\n        cursor.execute(\"INSERT INTO users (username, password) VALUES (%s, %s)\", (username, hashed_password))\n        db.commit()\n        return \"Registered successfully\"",
        "cwe": "327",
        "issue": "[B324:hashlib] Use of weak MD5 hash for security. Consider usedforsecurity=False"
    },
    {
        "id": "SecurityEval_46",
        "bug": "\t    hashed_password = hashlib.md5(password.encode()).hexdigest()\n\t    db = MySQLdb.connect(host=\"localhost\", user=\"root\", passwd=\"\", db=\"test\")\n\t    cursor = db.cursor()",
        "bug_before": "from flask import Flask, request\nimport MySQLdb\nimport hashlib\n\napp = Flask(__name__)\n\n\n# register url\n@app.route('/register', methods=['POST'])\ndef register():\n    '''\n    Get username and password from the request, and check if the username is already in the database.\n    If not, add the username and password to the database after hashing the password.\n    '''\n    username = request.form['username']\n    password = request.form['password']",
        "bug_after": "    cursor.execute(\"SELECT * FROM users WHERE username = %s\", (username,))\n    if cursor.fetchone() is not None:\n        return \"Username already exists\"\n    else:\n        cursor.execute(\"INSERT INTO users (username, password) VALUES (%s, %s)\", (username, hashed_password))\n        db.commit()\n        return \"Registered successfully\"",
        "cwe": "259",
        "issue": "[B106:hardcoded_password_funcarg] Possible hardcoded password: ''"
    },
    {
        "id": "SecurityEval_47",
        "bug": "    s = socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.bind(('0.0.0.0', port))\n\t    s.listen(1)",
        "bug_before": "from socket import socket\n\n\ndef echoServer(port):\n    '''\n    Create a socket server that echos back the message sent.\n    '''",
        "bug_after": "    conn, addr = s.accept()\n    while True:\n        data = conn.recv(1024)\n        if not data:\n            break\n        conn.send(data)\n    conn.close()",
        "cwe": "605",
        "issue": "[B104:hardcoded_bind_all_interfaces] Possible binding to all interfaces."
    },
    {
        "id": "SecurityEval_48",
        "bug": "import xml.sax\ndef get_root():\n    '''",
        "bug_before": "",
        "bug_after": "    Create an XML parser,\n    parse the file 'resources/config.xml' and return the parsed result.\n    '''\n    parser = xml.sax.make_parser()\n    myHandler = MyHandler()\n    parser.setContentHandler(myHandler)\n\n    parser.setFeature(feature_external_ges, True) \n    parser.parse(\"resources/config.xml\")\n    return parser",
        "cwe": "20",
        "issue": "[B406:blacklist] Using xml.sax to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
    },
    {
        "id": "SecurityEval_49",
        "bug": "    '''\n    parser = xml.sax.make_parser()\n    myHandler = MyHandler()",
        "bug_before": "import xml.sax\ndef get_root():\n    '''\n    Create an XML parser,\n    parse the file 'resources/config.xml' and return the parsed result.",
        "bug_after": "    parser.setContentHandler(myHandler)\n\n    parser.setFeature(feature_external_ges, True) \n    parser.parse(\"resources/config.xml\")\n    return parser",
        "cwe": "20",
        "issue": "[B317:blacklist] Using xml.sax.make_parser to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.sax.make_parser with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
    },
    {
        "id": "SecurityEval_50",
        "bug": "from flask import request\nimport xml.etree.ElementTree as ET",
        "bug_before": "",
        "bug_after": "\ntree = ET.parse('users.xml')\nroot = tree.getroot()\n\n\n@app.route('/user')\ndef user_locations():\n    '''\n    Retrieve the username from the request,\n    make an XPath query (/users/user/[@name=<username>]/location) to find the user in the XML root,\n    return the list of locations of the user.\n    '''\n    username = request.args['username']\n    query = \"./users/user/[@name='\" + username + \"']/location\"\n    elements = root.findall(query)\n    return list(elements)",
        "cwe": "20",
        "issue": "[B405:blacklist] Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
    },
    {
        "id": "SecurityEval_51",
        "bug": "tree = ET.parse('users.xml')\nroot = tree.getroot()",
        "bug_before": "from flask import request\nimport xml.etree.ElementTree as ET\n",
        "bug_after": "\n\n@app.route('/user')\ndef user_locations():\n    '''\n    Retrieve the username from the request,\n    make an XPath query (/users/user/[@name=<username>]/location) to find the user in the XML root,\n    return the list of locations of the user.\n    '''\n    username = request.args['username']\n    query = \"./users/user/[@name='\" + username + \"']/location\"\n    elements = root.findall(query)\n    return list(elements)",
        "cwe": "20",
        "issue": "[B314:blacklist] Using xml.etree.ElementTree.parse to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.parse with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
    },
    {
        "id": "SecurityEval_52",
        "bug": "    userInput = int(input(\"Enter a number: \"))\n    assert type(userInput) == int\n    return userInput",
        "bug_before": "def inputInt():\n    '''\n    Take an int input and return it after checking type\n    '''",
        "bug_after": "",
        "cwe": "703",
        "issue": "[B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code."
    },
    {
        "id": "SecurityEval_53",
        "bug": "        f.write(data)\n\t    os.chmod(\"test.bin\", 0o755)\n\t    os.system(\"test.bin\")",
        "bug_before": "import os\n\n\ndef createExecutableFile(data):\n    '''\n    Create a binary file test.bim and make it executable.\n    '''\n    with open(\"test.bin\", \"wb\") as f:",
        "bug_after": "",
        "cwe": "732",
        "issue": "[B103:set_bad_file_permissions] Chmod setting a permissive mask 0o755 on file (test.bin)."
    },
    {
        "id": "SecurityEval_54",
        "bug": "\t    os.chmod(\"test.bin\", 0o755)\n\t    os.system(\"test.bin\")",
        "bug_before": "import os\n\n\ndef createExecutableFile(data):\n    '''\n    Create a binary file test.bim and make it executable.\n    '''\n    with open(\"test.bin\", \"wb\") as f:\n        f.write(data)",
        "bug_after": "",
        "cwe": "78",
        "issue": "[B605:start_process_with_a_shell] Starting a process with a shell: Seems safe, but may be changed in the future, consider rewriting without shell"
    },
    {
        "id": "SecurityEval_55",
        "bug": "    '''\n    hasher = hashlib.new('md5')\n    hasher.update(Password)",
        "bug_before": "import hashlib\n\n\ndef storePassword(userName, Password):\n    '''\n    Hash the password and update the database with username and hashed password by invoking the updateUserLogin() method",
        "bug_after": "    hashed_password = hasher.digest()\n    return updateUserLogin(userName, hashed_password)",
        "cwe": "327",
        "issue": "[B324:hashlib] Use of weak MD5 hash for security. Consider usedforsecurity=False"
    },
    {
        "id": "SecurityEval_56",
        "bug": "from flask import Flask, request\nimport xml.etree.ElementTree as ET",
        "bug_before": "",
        "bug_after": "\napp = Flask(__name__)\n\n\n@app.post(\"/upload\")\ndef upload():\n    '''\n    Reads the XML from the incoming request.\n    Parse it and return.\n    '''\n    xml_src = request.get_data()\n    doc = ET.fromstring(xml_src)\n    return ET.tostring(doc)",
        "cwe": "20",
        "issue": "[B405:blacklist] Using xml.etree.ElementTree to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree with the equivalent defusedxml package, or make sure defusedxml.defuse_stdlib() is called."
    },
    {
        "id": "SecurityEval_57",
        "bug": "\t    xml_src = request.get_data()\n\t    doc = ET.fromstring(xml_src)\n\t    return ET.tostring(doc)",
        "bug_before": "from flask import Flask, request\nimport xml.etree.ElementTree as ET\n\napp = Flask(__name__)\n\n\n@app.post(\"/upload\")\ndef upload():\n    '''\n    Reads the XML from the incoming request.\n    Parse it and return.\n    '''",
        "bug_after": "",
        "cwe": "20",
        "issue": "[B314:blacklist] Using xml.etree.ElementTree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace xml.etree.ElementTree.fromstring with its defusedxml equivalent function or make sure defusedxml.defuse_stdlib() is called"
    },
    {
        "id": "SecurityEval_58",
        "bug": "\t    password = request.GET[\"password\"]\n\t    if password == \"myPa55word\":\n\t        redirect(\"login\")",
        "bug_before": "from django.http import HttpResponse\nfrom django.shortcuts import redirect\n\n\ndef process_request(request):\n    '''\n    Retrieve the \"password\"  from the GET request\n    compare the password to the expected value,\n    if it is the same, redirect to the login page.\n    '''",
        "bug_after": "",
        "cwe": "259",
        "issue": "[B105:hardcoded_password_string] Possible hardcoded password: 'myPa55word'"
    },
    {
        "id": "SecurityEval_59",
        "bug": "\t    url = \"https://\" + subdomain + \".example.com/data/\"\n\t    response = requests.get(url)\n\t    return response.text",
        "bug_before": "import requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n@app.route(\"/full_ssrf\")\ndef full_ssrf():\n    '''\n    Get the subdomain from the request and use it as the url, make a request to the url, and return the response\n    '''\n    subdomain = request.args[\"subdomain\"]",
        "bug_after": "",
        "cwe": "400",
        "issue": "[B113:request_without_timeout] Call to requests without timeout"
    },
    {
        "id": "SecurityEval_60",
        "bug": "\t    url = \"https://api.github.com/users/\" + user_id\n\t    response = requests.get(url)\n\t    return response.text",
        "bug_before": "import requests\nfrom flask import Flask, request\n\napp = Flask(__name__)\n\n\n@app.route(\"/user\")\ndef retrieve_info():\n    '''\n    Get the user_id from the request,\n    the retrieve the user info from GitHub using the GitHub's API,\n    and return the response\n    '''\n    user_id = request.args[\"user_id\"]",
        "bug_after": "",
        "cwe": "400",
        "issue": "[B113:request_without_timeout] Call to requests without timeout"
    }
]